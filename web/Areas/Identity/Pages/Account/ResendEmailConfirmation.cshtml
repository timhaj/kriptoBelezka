@page
@model ResendEmailConfirmationModel
@{
    ViewData["Title"] = "Resend email confirmation";
}

<input type="hidden" id="saved-theme" value="light-mode" />
<h1>@ViewData["Title"]</h1>
<h2>Enter your email.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="All" class="text-danger" role="alert"></div>
            <div class="form-floating mb-3">
                <input asp-for="Input.Email" class="form-control" aria-required="true" placeholder="name@example.com" />
                <label asp-for="Input.Email" class="form-label"></label>
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>
            <button type="submit" class="w-100 btn btn-lg" id="resend_email_confirmation">Resend</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const savedThemeInput = document.getElementById("saved-theme");

        // Apply the initial theme based on the value of the hidden input
        const applyTheme = (theme) => {
            const navbarTheme = document.getElementById("navbar");
            const navbar_titleTheme = document.getElementById("navbar_title");
            const partial_footerTheme = document.getElementById("partial_footer");
            const nav_linkTheme = document.getElementsByClassName("nav-link2");
            const navbar_gearTheme = document.getElementById("navbar_gear");
            if (theme == "dark") {
                navbar_gearTheme.setAttribute("fill", "#f5acc6");
            }
            else {
                navbar_gearTheme.setAttribute("fill", "#392d31");
            }
            document.body.className = theme === "dark" ? "dark-mode" : "light-mode";
            navbarTheme.className = theme === "dark" ? "dark-mode" : "light-mode";
            partial_footerTheme.classList.toggle(theme === "dark" ? "dark-mode" : "light-mode");
            navbar_titleTheme.classList.toggle(theme === "dark" ? "dark-mode" : "light-mode");
            for (let i = 0; i < nav_linkTheme.length; i++) {
                nav_linkTheme[i].classList.toggle(theme === "dark" ? "dark-mode" : "light-mode");
            }
        };

        // Initialize theme on page load
        applyTheme(savedThemeInput.value);

        // Observe changes to the input value
        const observer = new MutationObserver(() => {
            applyTheme(savedThemeInput.value);
        });

        // Start observing the hidden input for changes to the `value` attribute
        observer.observe(savedThemeInput, { attributes: true, attributeFilter: ["value"] });
    });
</script>