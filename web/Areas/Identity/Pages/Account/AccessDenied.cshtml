@page
@model AccessDeniedModel
@{
    ViewData["Title"] = "Access denied";
}

<input type="hidden" id="saved-theme" value="light-mode" />
<header>
    <h1 class="text-danger">@ViewData["Title"]</h1>
    <p class="text-danger">You do not have access to this resource.</p>
</header>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const savedThemeInput = document.getElementById("saved-theme");

        // Apply the initial theme based on the value of the hidden input
        const applyTheme = (theme) => {
            const navbarTheme = document.getElementById("navbar");
            const navbar_titleTheme = document.getElementById("navbar_title");
            const partial_footerTheme = document.getElementById("partial_footer");
            const nav_linkTheme = document.getElementsByClassName("nav-link2");
            const navbar_gearTheme = document.getElementById("navbar_gear");
            if (theme == "dark") {
                navbar_gearTheme.setAttribute("fill", "#f5acc6");
            }
            else {
                navbar_gearTheme.setAttribute("fill", "#392d31");
            }
            document.body.className = theme === "dark" ? "dark-mode" : "light-mode";
            navbarTheme.className = theme === "dark" ? "dark-mode" : "light-mode";
            partial_footerTheme.classList.toggle(theme === "dark" ? "dark-mode" : "light-mode");
            navbar_titleTheme.classList.toggle(theme === "dark" ? "dark-mode" : "light-mode");
            for (let i = 0; i < nav_linkTheme.length; i++) {
                nav_linkTheme[i].classList.toggle(theme === "dark" ? "dark-mode" : "light-mode");
            }
        };

        // Initialize theme on page load
        applyTheme(savedThemeInput.value);

        // Observe changes to the input value
        const observer = new MutationObserver(() => {
            applyTheme(savedThemeInput.value);
        });

        // Start observing the hidden input for changes to the `value` attribute
        observer.observe(savedThemeInput, { attributes: true, attributeFilter: ["value"] });
    });
</script>