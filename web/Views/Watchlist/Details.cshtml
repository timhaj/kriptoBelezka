@model web.Controllers.WatchlistController.WatchlistDetailsViewModel

@{
    ViewData["Title"] = "Watchlist";
}

<input type="hidden" id="saved-theme" value="@ViewBag.mode" />
<div>
    <h1><span id="watchlist_username">@ViewBag.username</span>'s Watchlist</h1>

    <div>
        <a asp-action="Index" id="watchlist_back_to_list">
            < Back to List</a>
    </div>
    <hr />

    @{
        if (ViewBag.IsOwner)
        {
            <form asp-action="Create" asp-controller="WatchlistAsset" method="post"
                class="d-flex flex-row justify-content-end align-items-center">
                <div class="dropdown" id="watchlist_dropdown">
                    <div class="form-group">
                        <input type="text" class="search-bar" id="searchInput" placeholder="Search crypto tokens..."
                            onkeyup="filterOptions()">

                        <div class="options-list" id="cryptoSelect" name="AssetId" required>
                            @foreach (var asset in Model.Assets)
                            {
                                <div class="option" value="@asset.Id">@asset.Name</div>
                            }
                        </div>
                    </div>
                </div>
                <input type="hidden" name="WatchlistId" value="@Model.Watchlist.Id" />
                <input type="hidden" name="AssetId" value="" />
                <button id="watchlist-asset-adder" class="btn" type="submit">Add asset</button>
            </form>
        }
    }


</div>
<br />
<table class="table striped-table table-hover" id="watchlist-table">
    <thead>
        <tr>
            <th class="order mainpage-table-name">Rank</th>
            <th class="order mainpage-table-name">Symbol</th>
            <th class="order">Price (@ViewBag.CurSymbol)</th>
            <th class="order">Market Cap (@ViewBag.CurSymbol)</th>
            <th>Supply</th>
            <th>Max Supply</th>
            <th class="order mainpage-table-change">Change (24hr)</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var savedItem in Model.Saved)
        {
            <tr>
                <td class="mainpage-table-name">@savedItem.Id</td>
                <td class="mainpage-table-name">@savedItem.Name</td>
                <td>
                    @{
                        string priceString = savedItem.Price.ToString();
                        string formattedPrice = "N/A";
                        // Get the current rate from ViewBag
                        string currentRateString = ViewBag.CurrentRate?.ToString();

                        if (!string.IsNullOrWhiteSpace(priceString) && !string.IsNullOrWhiteSpace(currentRateString))
                        {
                            // Parse strings to decimal
                            decimal price = decimal.Parse(priceString);
                            decimal currentRate = decimal.Parse(currentRateString,
                            System.Globalization.CultureInfo.InvariantCulture);

                            // Adjust price by the current rate
                            decimal adjustedPrice = price / currentRate;
                            // Format to two decimal places
                            if (adjustedPrice >= 0.1m)
                            {
                                formattedPrice = adjustedPrice.ToString("N2", System.Globalization.CultureInfo.InvariantCulture);
                            }
                            else if (adjustedPrice > 0.01m && adjustedPrice < 0.1m)
                            {
                                formattedPrice = adjustedPrice.ToString("N5", System.Globalization.CultureInfo.InvariantCulture);
                            }
                            else
                            {
                                formattedPrice = adjustedPrice.ToString("N10", System.Globalization.CultureInfo.InvariantCulture);
                            }
                        }

                        @formattedPrice
                        @ViewBag.CurrentSymbol
                    }
                </td>
                <td class="mcap">
                    @{
                        string marketCapString = savedItem.MarketCap.ToString();
                        string formattedMarketCap = "N/A";
                        currentRateString = ViewBag.CurrentRate?.ToString();
                        if (!string.IsNullOrWhiteSpace(marketCapString) && !string.IsNullOrWhiteSpace(currentRateString))
                        {
                            // Parse strings to decimal
                            decimal marketCap = decimal.Parse(marketCapString);
                            decimal currentRate = decimal.Parse(currentRateString,
                            System.Globalization.CultureInfo.InvariantCulture);

                            // Adjust market cap by the current rate
                            decimal adjustedMarketCap = marketCap / currentRate;

                            // Format to no decimal places with thousands separator
                            formattedMarketCap = adjustedMarketCap.ToString("N0",
                            System.Globalization.CultureInfo.InvariantCulture);
                        }

                        @formattedMarketCap
                        @ViewBag.CurrentSymbol
                    }
                </td>
                <td class="supply">
                    @{
                        string supply = @savedItem.CurrentSupply.ToString();
                        supply = supply.Replace(",", ".");
                        string formattedSupply = "Invalid Supply";
                        if (!string.IsNullOrWhiteSpace(supply) && supply.Contains("."))
                        {
                            int dotIndex = supply.IndexOf(".");
                            formattedSupply = supply.Substring(0, dotIndex); // po potrebi
                        }
                        @formattedSupply
                    }
                </td>
                <td class="msupply">
                    @{
                        string MaxSupply = @savedItem.MaxSupply.ToString();
                        MaxSupply = MaxSupply.Replace(",", ".");
                        string formattedMaxSupply = "N/A";
                        if (!string.IsNullOrWhiteSpace(MaxSupply) && MaxSupply.Contains("."))
                        {
                            int dotIndex = MaxSupply.IndexOf(".");
                            formattedMaxSupply = MaxSupply.Substring(0, dotIndex);
                        }
                        if (MaxSupply == "0.00")
                        {
                            formattedMaxSupply = "N/A";
                        }
                        @formattedMaxSupply
                    }
                </td>
                <td class="change mainpage-table-change">@{
                        string changePercent24Hr = @savedItem.ChangePercent24Hr.ToString();
                        string replacedString = changePercent24Hr.Replace(",", ".");
                        string formattedchangePercent24Hr = "N/A";

                        if (!string.IsNullOrWhiteSpace(replacedString) && replacedString.Contains("."))
                        {
                            int dotIndex = replacedString.IndexOf(".");
                            formattedchangePercent24Hr = replacedString.Substring(0, dotIndex + 3);
                        }

                        @formattedchangePercent24Hr
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
</div>




<script>
    let username = document.getElementById("watchlist_username");
    username.innerHTML = username.innerHTML.substring(0, username.innerHTML.indexOf(String.fromCharCode(64)));

    for (let i = 0; i < document.getElementsByClassName('supply').length; i++) {
        value = document.getElementsByClassName('supply')[i].innerHTML;
        value = BigInt(value).toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
        document.getElementsByClassName('supply')[i].innerHTML = value;
    }

    for (let i = 0; i < document.getElementsByClassName('msupply').length; i++) {
        value = document.getElementsByClassName('msupply')[i].innerHTML;
        value = value.replace(/\s+/g, '');
        if (value == "N/A") {
            document.getElementsByClassName('msupply')[i].innerHTML = value;
        }
        else {
            value = BigInt(value).toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
            document.getElementsByClassName('msupply')[i].innerHTML = value;
        }
    }

    for (let i = 0; i < document.getElementsByClassName('change').length; i++) {
        value = document.getElementsByClassName('change')[i].innerHTML;
        value = parseFloat(value);
        if (value > 0) {
            document.getElementsByClassName('change')[i].classList.toggle("up");
            svg_up = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-up-fill" viewBox="0 0 16 16">
  <path d="m7.247 4.86-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z"/>
</svg>`;
            document.getElementsByClassName('change')[i].innerHTML = svg_up + ' ' + value + "%";
        }
        else {
            document.getElementsByClassName('change')[i].classList.toggle("down");
            svg_down = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-down-fill" viewBox="0 0 16 16">
            <path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z" />
        </svg>`;
            document.getElementsByClassName('change')[i].innerHTML = svg_down + ' ' + value + "%";
        }
    }

    function filterOptions() {

    }
    const searchBar = document.querySelector('.search-bar');
    const optionsList = document.querySelector('.options-list');
    const options = document.querySelectorAll('.option');
    // Show options when the search bar is focused
    searchBar.addEventListener('focus', () => {
        optionsList.classList.add('active');
    });

    // Hide options when clicking outside
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.dropdown')) {
            optionsList.classList.remove('active');
        }
    });

    // Filter options based on the search input
    searchBar.addEventListener('input', () => {
        const searchTerm = searchBar.value.toLowerCase();
        options.forEach(option => {
            const text = option.textContent.toLowerCase();
            if (text.includes(searchTerm)) {
                option.style.display = "block";
            } else {
                option.style.display = "none";
            }
        });
    });

    // Handle option click
    options.forEach(option => {
        option.addEventListener('click', () => {
            searchBar.value = option.textContent;
            const hiddenInput = document.querySelector('input[name="AssetId"]');
            hiddenInput.value = option.getAttribute('value');
            optionsList.classList.remove('active');
        });
    });

    @*     const cryptoData = [];
    function populateSelect() {
        const select = document.getElementById("cryptoSelect");
        cryptoData.forEach(crypto => {
            const option = document.createElement("option");
            option.value = crypto.symbol;
            option.textContent = `${crypto.name} (${crypto.symbol})`;
            select.appendChild(option);
        });
    }

    function filterOptions() {
        const input = document.getElementById("searchInput").value.toLowerCase();
        const select = document.getElementById("cryptoSelect");
        const options = select.getElementsByTagName("option");

        // Skrij vse možnosti, ki ne ustrezajo iskanju
        for (let i = 1; i < options.length; i++) {
            const option = options[i];
            const text = option.textContent.toLowerCase();

            if (text.includes(input)) {
                option.style.display = "block";  // Pokaži možnost
            } else {
                option.style.display = "none";  // Skrij možnost
            }
        }
    }

    populateSelect(); *@
        document.addEventListener("DOMContentLoaded", function () {
            const savedThemeInput = document.getElementById("saved-theme");

            // Apply the initial theme based on the value of the hidden input
            const applyTheme = (theme) => {
                const navbarTheme = document.getElementById("navbar");
                const navbar_titleTheme = document.getElementById("navbar_title");
                const partial_footerTheme = document.getElementById("partial_footer");
                const nav_linkTheme = document.getElementsByClassName("nav-link2");
                const navbar_gearTheme = document.getElementById("navbar_gear");
                const table = document.getElementById("watchlist-table");
                if (theme == "dark") {
                    navbar_gearTheme.setAttribute("fill", "#f5acc6");
                    table.classList.add("dark-theme");
                    table.classList.remove("light-theme");
                }
                else {
                    navbar_gearTheme.setAttribute("fill", "#392d31");
                    table.classList.add("light-theme");
                    table.classList.remove("dark-theme");
                }
                document.body.className = theme === "dark" ? "dark-mode" : "light-mode";
                navbarTheme.className = theme === "dark" ? "dark-mode" : "light-mode";
                partial_footerTheme.classList.toggle(theme === "dark" ? "dark-mode" : "light-mode");
                navbar_titleTheme.classList.toggle(theme === "dark" ? "dark-mode" : "light-mode");
                for (let i = 0; i < nav_linkTheme.length; i++) {
                    nav_linkTheme[i].classList.toggle(theme === "dark" ? "dark-mode" : "light-mode");
                }
            };

            // Initialize theme on page load
            applyTheme(savedThemeInput.value);

            // Observe changes to the input value
            const observer = new MutationObserver(() => {
                applyTheme(savedThemeInput.value);
            });

            // Start observing the hidden input for changes to the `value` attribute
            observer.observe(savedThemeInput, { attributes: true, attributeFilter: ["value"] });
        });

    function table_sort() {
        const styleSheet = document.createElement('style');
        styleSheet.innerHTML = `
        .order-inactive span {
            visibility:hidden;
        }
        .order-inactive:hover span {
            visibility:visible;
        }
        .order-active span {
            visibility: visible;
        }
    `;
        document.head.appendChild(styleSheet);
        console.log("test");
        document.querySelectorAll('th.order').forEach(th_elem => {
            let asc = true;
            const span_elem = document.createElement('span');
            span_elem.style = "font-size:0.8rem; margin-left:0.5rem";
            span_elem.innerHTML = "▼";
            th_elem.appendChild(span_elem);
            th_elem.classList.add('order-inactive');

            const index = Array.from(th_elem.parentNode.children).indexOf(th_elem);
            th_elem.addEventListener('click', (e) => {
                document.querySelectorAll('th.order').forEach(elem => {
                    elem.classList.remove('order-active')
                    elem.classList.add('order-inactive')
                });
                th_elem.classList.remove('order-inactive');
                th_elem.classList.add('order-active');

                if (!asc) {
                    th_elem.querySelector('span').innerHTML = '▲';
                } else {
                    th_elem.querySelector('span').innerHTML = '▼';
                }
                const arr = Array.from(th_elem.closest("table").querySelectorAll('tbody tr'));
                arr.sort((a, b) => {
                    let a_val = a.children[index].innerText.replace(/[\$,]/g, '');
                    let b_val = b.children[index].innerText.replace(/[\$,]/g, '');
                    const a_num = parseFloat(a_val);
                    const b_num = parseFloat(b_val);

                    // Check if both values are valid numbers
                    if (!isNaN(a_num) && !isNaN(b_num)) {
                        return asc ? a_num - b_num : b_num - a_num;
                    }
                    return (asc) ? a_val.localeCompare(b_val) : b_val.localeCompare(a_val);
                })
                arr.forEach(elem => {
                    th_elem.closest("table").querySelector("tbody").appendChild(elem)
                });
                asc = !asc;
            })
        })
    }

    table_sort();
</script>


@* 
<script>


</script> *@