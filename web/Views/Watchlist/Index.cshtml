@model IEnumerable<web.Models.Watchlist>

@{
    ViewData["Title"] = "Public Watchlists";
}

<input type="hidden" id="saved-theme" value="@ViewBag.mode" />
<h1>Public Watchlists</h1>
<hr />
<table class="table striped-table table-hover" id="watchlists-table">
    <thead>
        <tr>
            <th class="mainpage-table-name">
                @Html.DisplayNameFor(model => model.User)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>

        @foreach (var item in Model)
        {
            <tr>
                <td class="email_prikaz mainpage-table-name">

                    @Html.DisplayFor(modelItem => item.OwnerId.Email);
                </td>
                <td class="mainpage-table-name">
                    <a asp-action="Details" asp-route-id="@item.Id" class="details_link">Details</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    let td_list = document.getElementsByClassName("email_prikaz");
    for (let index = 0; index < td_list.length; index++) {
        td_list[index].innerHTML = td_list[index].innerHTML.substring(0, td_list[index].innerHTML.indexOf(String.fromCharCode(64)));
    }

    document.addEventListener("DOMContentLoaded", function () {
        const savedThemeInput = document.getElementById("saved-theme");

        // Apply the initial theme based on the value of the hidden input
        const applyTheme = (theme) => {
            const navbarTheme = document.getElementById("navbar");
            const navbar_titleTheme = document.getElementById("navbar_title");
            const partial_footerTheme = document.getElementById("partial_footer");
            const nav_linkTheme = document.getElementsByClassName("nav-link2");
            const navbar_gearTheme = document.getElementById("navbar_gear");
            const table = document.getElementById("watchlists-table");
            if (theme == "dark") {
                navbar_gearTheme.setAttribute("fill", "#f5acc6");
                table.classList.add("dark-theme");
                table.classList.remove("light-theme");
            }
            else {
                navbar_gearTheme.setAttribute("fill", "#392d31");
                table.classList.add("light-theme");
                table.classList.remove("dark-theme");
            }
            document.body.className = theme === "dark" ? "dark-mode" : "light-mode";
            navbarTheme.className = theme === "dark" ? "dark-mode" : "light-mode";
            partial_footerTheme.classList.toggle(theme === "dark" ? "dark-mode" : "light-mode");
            navbar_titleTheme.classList.toggle(theme === "dark" ? "dark-mode" : "light-mode");
            for (let i = 0; i < nav_linkTheme.length; i++) {
                nav_linkTheme[i].classList.toggle(theme === "dark" ? "dark-mode" : "light-mode");
            }
        };

        // Initialize theme on page load
        applyTheme(savedThemeInput.value);

        // Observe changes to the input value
        const observer = new MutationObserver(() => {
            applyTheme(savedThemeInput.value);
        });

        // Start observing the hidden input for changes to the `value` attribute
        observer.observe(savedThemeInput, { attributes: true, attributeFilter: ["value"] });
    });
</script>