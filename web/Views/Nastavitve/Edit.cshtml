@model web.Models.Nastavitve

@{
    ViewData["Title"] = "Edit";
}

@{
    var rates = ViewBag.Rates as IEnumerable<dynamic>;
}

<input type="hidden" id="saved-theme" value="@ViewBag.mode" />

<h1>Edit</h1>

<h4>Nastavitve</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" name="CurrentCurrencySelected"
                value="@ViewBag.SavedCurrency.CurrentCurrencySelected" />
            <input type="hidden" asp-for="Id" />
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsDarkMode" /> @Html.DisplayNameFor(model =>
                    model.IsDarkMode)
                </label>
            </div>
            @*             <div class="form-group">
                <label asp-for="CurrentCurrencySelected" class="control-label"></label>
                <input asp-for="CurrentCurrencySelected" class="form-control" />
                <span asp-validation-for="CurrentCurrencySelected" class="text-danger"></span>
            </div> *@
            <div class="dropdown">
                <div class="form-group">
                    <label asp-for="CurrentCurrencySelected" class="control-label"></label>
                    <input type="text" class="search-bar" id="searchInput"
                        placeholder="@ViewBag.SavedCurrency.CurrentCurrencySelected" onkeyup="filterOptions()">
                    <div class="options-list" id="cryptoSelect" name="CurrentCurrencySelected" required>
                        @foreach (var rate in @ViewBag.Rates)
                        {
                            <div class="option" value="@rate.Id">@rate.Id (@rate.Symbol)</div>
                        }
                    </div>
                </div>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<script>
    function filterOptions() {

    }
    const searchBar = document.querySelector('.search-bar');
    const optionsList = document.querySelector('.options-list');
    const options = document.querySelectorAll('.option');
    // Show options when the search bar is focused
    searchBar.addEventListener('focus', () => {
        optionsList.classList.add('active');
    });

    // Hide options when clicking outside
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.dropdown')) {
            optionsList.classList.remove('active');
        }
    });

    // Filter options based on the search input
    searchBar.addEventListener('input', () => {
        const searchTerm = searchBar.value.toLowerCase();
        options.forEach(option => {
            const text = option.textContent.toLowerCase();
            if (text.includes(searchTerm)) {
                option.style.display = "block";
            } else {
                option.style.display = "none";
            }
        });
    });

    // Handle option click
    options.forEach(option => {
        option.addEventListener('click', () => {
            searchBar.value = option.textContent;
            const hiddenInput = document.querySelector('input[name="CurrentCurrencySelected"]');
            hiddenInput.value = option.getAttribute('value');
            optionsList.classList.remove('active');
        });
    });



    document.addEventListener("DOMContentLoaded", function () {
        const savedThemeInput = document.getElementById("saved-theme");

        // Apply the initial theme based on the value of the hidden input
        const applyTheme = (theme) => {
            document.body.className = theme === "dark" ? "dark-mode" : "light-mode";
        };

        // Initialize theme on page load
        applyTheme(savedThemeInput.value);

        // Observe changes to the input value
        const observer = new MutationObserver(() => {
            applyTheme(savedThemeInput.value);
        });

        // Start observing the hidden input for changes to the `value` attribute
        observer.observe(savedThemeInput, { attributes: true, attributeFilter: ["value"] });
    });
</script>