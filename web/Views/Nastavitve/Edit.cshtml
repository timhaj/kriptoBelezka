@model web.Models.Nastavitve

@{
    ViewData["Title"] = "Edit";
}
<input type="hidden" id="saved-theme" value="@ViewBag.mode" />
<h1>Edit</h1>

<h4>Nastavitve</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsDarkMode" /> @Html.DisplayNameFor(model =>
                    model.IsDarkMode)
                </label>
            </div>
            <div class="form-group">
                <label asp-for="CurrentCurrencySelected" class="control-label"></label>
                <input asp-for="CurrentCurrencySelected" class="form-control" />
                <span asp-validation-for="CurrentCurrencySelected" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const savedThemeInput = document.getElementById("saved-theme");

        // Apply the initial theme based on the value of the hidden input
        const applyTheme = (theme) => {
            document.body.className = theme === "dark" ? "dark-mode" : "light-mode";
        };

        // Initialize theme on page load
        applyTheme(savedThemeInput.value);

        // Observe changes to the input value
        const observer = new MutationObserver(() => {
            applyTheme(savedThemeInput.value);
        });

        // Start observing the hidden input for changes to the `value` attribute
        observer.observe(savedThemeInput, { attributes: true, attributeFilter: ["value"] });
    });
</script>