@model IEnumerable<web.Models.Portfolio>

@{
    ViewData["Title"] = "Index";
}

@* <h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.User)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.User.Id)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table> *@

<input type="hidden" id="saved-theme" value="@ViewBag.mode" />
<div>
    @if (!Model.Any())
    {
        <p>You have not yet created a portfolio.</p>
        <form asp-action="Create">
            <input type="hidden" name="OwnerId" value="@ViewBag.UserId" />
            <input type="submit" value="Create" class="btn btn-primary" />
        </form>
    }
    else
    {
        <div class="portfolio-main">
            <div>
                <h2>My portfolio</h2>
                <p class="portfolio-networth h1 fw-bold">
                        @{
                    string portfolioNetWorthString = ViewBag.PortfolioNetWorth?.ToString();
                    string formattedPortfolioNetWorth = "N/A";
                    // Get the current rate from ViewBag
                    string currentRateString = ViewBag.CurrentRate?.ToString();

                    if (!string.IsNullOrWhiteSpace(portfolioNetWorthString) && !string.IsNullOrWhiteSpace(currentRateString))
                    {
                            // Parse strings to decimal
                            decimal portfolioNetWorth = decimal.Parse(portfolioNetWorthString);
                            decimal currentRate = decimal.Parse(currentRateString, System.Globalization.CultureInfo.InvariantCulture);

                            // Adjust portfolio net worth by the current rate
                            decimal adjustedPortfolioNetWorth = portfolioNetWorth / currentRate;

                            // Format to two decimal places with thousands separator
                            formattedPortfolioNetWorth = adjustedPortfolioNetWorth.ToString("N2", System.Globalization.CultureInfo.InvariantCulture);
                    }

                    @formattedPortfolioNetWorth
                    @ViewBag.CurrentSymbol
                }
                </p>
            </div>
            <button class="portfolio-add-button"><a asp-controller="Transakcija" asp-action="Create"
                    class="portfolio-add-button-link">+ Add transaction</a></button>
        </div>

        <div>
            <canvas id="myChart"></canvas>
        </div>


        <hr>
        <div class="d-flex">
            <p class="portfolio-holdings-switcher me-5">Holdings</p>
            <p class="portfolio-transaction-switcher">Transactions</p>
        </div>
        <table class="portfolio-transaction-history-tab w-100">
            <thead>
                <tr>
                    <th class="pe-5">Date</th>
                    <th class="pe-5">Asset</th>
                    <th class="pe-5">Price</th>
                    <th class="pe-5">Quantity</th>
                </tr>
            </thead>
            <tbody id="podatki">
                @foreach (var t in @ViewBag.transactions)
                {
                    <tr>
                        <td>@t.Date</td>
                        <td>@t.Asset.Name</td>
                        <td>
                            @{
                                string priceString = t.Price?.ToString();
                                string formattedPrice = "N/A";

                                // Get the current rate from ViewBag
                                currentRateString = ViewBag.CurrentRate?.ToString();

                                if (!string.IsNullOrWhiteSpace(priceString) && !string.IsNullOrWhiteSpace(currentRateString))
                                {
                                    // Parse strings to decimal
                                    decimal price = decimal.Parse(priceString);
                                    decimal currentRate = decimal.Parse(currentRateString,
                                    System.Globalization.CultureInfo.InvariantCulture);

                                    // Adjust price by the current rate
                                    decimal adjustedPrice = price / currentRate;

                                    // Format to two decimal places
                                    formattedPrice = adjustedPrice.ToString("N2", System.Globalization.CultureInfo.InvariantCulture);
                                }

                                @formattedPrice
                                @ViewBag.CurrentSymbol
                            }
                        </td>
                        <td>@t.Quantity</td>
                    </tr>
                }
            </tbody>
        </table>
        <table class="portfolio-overview-tab">
            <thead>
                <tr>
                    <th class="pe-5">Asset</th>
                    <th class="pe-5">Price</th>
                    <th class="pe-5">Holdings</th>
                    <th class="pe-5">Average buy price</th>
                    <th class="pe-5">Profit/Loss (ROI)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var t in @ViewBag.overview)
                {
                    <tr>
                        <td>@t.AssetName</td>
                        <td>
                            @{
                                string currentAssetPriceString = t.CurrentAssetPrice?.ToString();
                                string formattedCurrentAssetPrice = "N/A";

                                // Get the current rate from ViewBag
                                currentRateString = ViewBag.CurrentRate?.ToString();

                                if (!string.IsNullOrWhiteSpace(currentAssetPriceString) &&
                                !string.IsNullOrWhiteSpace(currentRateString))
                                {
                                    // Parse strings to decimal
                                    decimal currentAssetPrice = decimal.Parse(currentAssetPriceString);
                                    decimal currentRate = decimal.Parse(currentRateString,
                                    System.Globalization.CultureInfo.InvariantCulture);

                                    // Adjust price by the current rate
                                    decimal adjustedCurrentAssetPrice = currentAssetPrice / currentRate;

                                    // Format to two decimal places
                                    formattedCurrentAssetPrice = adjustedCurrentAssetPrice.ToString("N2",
                                    System.Globalization.CultureInfo.InvariantCulture);
                                }

                                @formattedCurrentAssetPrice
                                @ViewBag.CurrentSymbol
                            }
                        </td>
                        <td>@t.TotalQuantity</td>
                        <td>
                            @{
                    string averagePriceString = t.AveragePrice?.ToString();
                    string formattedAveragePrice = "N/A";
                    // Get the current rate from ViewBag
                    currentRateString = ViewBag.CurrentRate?.ToString();

                    if (!string.IsNullOrWhiteSpace(averagePriceString) && !string.IsNullOrWhiteSpace(currentRateString))
                    {
                            // Parse strings to decimal
                            decimal averagePrice = decimal.Parse(averagePriceString);
                            decimal currentRate = decimal.Parse(currentRateString, System.Globalization.CultureInfo.InvariantCulture);

                            // Adjust price by the current rate
                            decimal adjustedAveragePrice = averagePrice / currentRate;

                            // Format to two decimal places
                            formattedAveragePrice = adjustedAveragePrice.ToString("N2", System.Globalization.CultureInfo.InvariantCulture);
                    }

                    @formattedAveragePrice
                    @ViewBag.CurrentSymbol
                }
                        </td>
                        <td>
                            @if (t.ProfitLoss < 0)
                            {
                                <span style="color: red;">@t.ProfitLoss.ToString("P2")</span> <!-- Negative ROI -->
                            }
                            else
                            {
                                <span style="color: green;">@t.ProfitLoss.ToString("P2")</span> <!-- Positive ROI -->
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Get references to the buttons and tables
    const holdingsSwitcher = document.querySelector('.portfolio-holdings-switcher');
    const transactionsSwitcher = document.querySelector('.portfolio-transaction-switcher');
    const holdingsTable = document.querySelector('.portfolio-overview-tab');
    const transactionsTable = document.querySelector('.portfolio-transaction-history-tab');

    // Function to show holdings table and hide transactions table
    holdingsSwitcher.addEventListener('click', () => {
        holdingsTable.style.display = 'table'; // Show the holdings table
        transactionsTable.style.display = 'none'; // Hide the transactions table

        // Add active style to the clicked button
        holdingsSwitcher.classList.add('active');
        transactionsSwitcher.classList.remove('active');
    });

    // Function to show transactions table and hide holdings table
    transactionsSwitcher.addEventListener('click', () => {
        holdingsTable.style.display = 'none'; // Hide the holdings table
        transactionsTable.style.display = 'table'; // Show the transactions table

        // Add active style to the clicked button
        transactionsSwitcher.classList.add('active');
        holdingsSwitcher.classList.remove('active');
    });

    // Initialize by hiding one of the tables (optional)
    transactionsTable.style.display = 'none'; // Hide transactions table by default


    // Pridobimo vse vrstice iz <tbody> z ID-jem data-transactions
    const rows = document.querySelectorAll("#podatki tr");








    // Funkcija za normalizacijo datumov (nastavi čas na 00:00:00)
    function normalizeDate(date) {
        const normalized = new Date(date);
        normalized.setHours(0, 0, 0, 0);
        return normalized;
    }

    // Funkcija za izračun vrednosti portfelja
    function calculatePortfolioValue(transactions, startDate) {
        // Pridobimo dneve od startDate do danes
        const days = getDaysWithMonthNames(new Date(startDate));

        // Pretvorimo transakcije v bolj uporabno obliko (pretvorimo datume)
        const parsedTransactions = transactions.map(t => ({
            ...t,
            Date: normalizeDate(new Date(t.Date))
        }));
        console.log(parsedTransactions);
        // Objekt za shranjevanje vrednosti portfelja za vsak dan
        const portfolioValues = {};

        // Iteriramo skozi dni
        days.forEach(day => {
            const currentDate = normalizeDate(new Date(day));
            // Filtriramo transakcije, ki so bile izvedene pred ali na currentDate
            const filteredTransactions = parsedTransactions.filter(t => t.Date <= currentDate);

            // Izračunamo skupno vrednost portfelja za ta dan
            const totalValue = filteredTransactions.reduce((sum, t) => {
                return sum + t.Price * t.Quantity; //t.Price se spremeni dinamicno glede na dan
            }, 0);

            // Shranimo vrednost za ta dan
            portfolioValues[day] = totalValue;
        });

        return portfolioValues;
    }

    // Inicializiramo seznam objektov
    const podatki = [];

    // Iteriramo skozi vrstice in pridobimo podatke
    rows.forEach(row => {
        const cells = row.querySelectorAll("td");
        const obj = {
            Date: cells[0].textContent.trim(),
            Name: cells[1].textContent.trim(),
            Price: parseFloat(cells[2].textContent.trim()),
            Quantity: parseFloat(cells[3].textContent.trim())
        };
        podatki.push(obj);
    });

    // Prikaz podatkov v konzoli
    console.log(podatki);


    function getDaysWithMonthNames(startDate) {
        const endDate = new Date(); // Današnji datum
        const daysWithMonthNames = [];

        // Nastavite začetni datum na začetni datum (ura nastavljena na 00:00:00)
        startDate.setHours(0, 0, 0, 0);

        // Preverite, ali je začetni datum pred današnjim datumom
        if (startDate > endDate) {
            console.error('Začetni datum ne sme biti kasnejši od današnjega datuma.');
            return [];
        }

        // Zanka za iteracijo skozi dni
        for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {
            const formattedDate = date.toISOString().split('T')[0]; // Format: yyyy-MM-dd
            daysWithMonthNames.push(`${formattedDate}`);
        }
        return daysWithMonthNames;
    }

    var lastDate = '@ViewBag.lastTransaction.Date.ToString("yyyy-MM-ddTHH:mm:ss")';
    // Primer uporabe
    var startDate2 = new Date(lastDate);
    const days = getDaysWithMonthNames(startDate2);
    // Testiranje funkcije
    const portfolio = calculatePortfolioValue(podatki, startDate2);
    const portfolioValues = Object.values(portfolio);

    const data = {
        labels: days, // Dnevi v decembru
        datasets: [{
            label: 'Cena portfelija',
            data: portfolioValues, // Cene portfelija za vsak dan
            borderColor: 'rgb(100, 192, 192)',
            backgroundColor: 'rgba(100, 192, 192, 0.2)',
            fill: true,
            tension: 0.1
        }]
    };

    // Konfiguracija grafa
    const config = {
        type: 'line',
        data: data,
        options: {
            responsive: true,
            plugins: {
            },
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Dan'
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: 'Cena portfelija (€)'
                    }
                }
            }
        },
    };

    // Inicializirajte graf
    const ctx = document.getElementById('myChart').getContext('2d');
    new Chart(ctx, config);



    document.addEventListener("DOMContentLoaded", function () {
        const savedThemeInput = document.getElementById("saved-theme");

        // Apply the initial theme based on the value of the hidden input
        const applyTheme = (theme) => {
            document.body.className = theme === "dark" ? "dark-mode" : "light-mode";
        };

        // Initialize theme on page load
        applyTheme(savedThemeInput.value);

        // Observe changes to the input value
        const observer = new MutationObserver(() => {
            applyTheme(savedThemeInput.value);
        });

        // Start observing the hidden input for changes to the `value` attribute
        observer.observe(savedThemeInput, { attributes: true, attributeFilter: ["value"] });
    });
</script>
