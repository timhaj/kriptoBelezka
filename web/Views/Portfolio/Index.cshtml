@model IEnumerable<web.Models.Portfolio>

@{
    ViewData["Title"] = "Portfolio";
}

@* <h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.User)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.User.Id)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table> *@

<input type="hidden" id="saved-theme" value="@ViewBag.mode" />
<div>
    @if (!Model.Any())
    {
        <p>You have not yet created a portfolio.</p>
        <form asp-action="Create">
            <input type="hidden" name="OwnerId" value="@ViewBag.UserId" />
            <input type="submit" value="Create" class="btn btn-primary" />
        </form>
    }
    else
    {
        <div class="portfolio-main">
            <div>
                <h2>My portfolio</h2>
                <p class="portfolio-networth h1 fw-bold">
                    <span id="portfolio_networth_id">@{
                            string portfolioNetWorthString = ViewBag.PortfolioNetWorth?.ToString();
                            string formattedPortfolioNetWorth = "N/A";
                            // Get the current rate from ViewBag
                            string currentRateString = ViewBag.CurrentRate?.ToString();

                            if (!string.IsNullOrWhiteSpace(portfolioNetWorthString) &&
                            !string.IsNullOrWhiteSpace(currentRateString))
                            {
                                // Parse strings to decimal
                                decimal portfolioNetWorth = decimal.Parse(portfolioNetWorthString);
                                decimal currentRate = decimal.Parse(currentRateString,
                                System.Globalization.CultureInfo.InvariantCulture);

                                // Adjust portfolio net worth by the current rate
                                decimal adjustedPortfolioNetWorth = portfolioNetWorth / currentRate;

                                // Format to two decimal places with thousands separator
                                formattedPortfolioNetWorth = adjustedPortfolioNetWorth.ToString("N2",
                                System.Globalization.CultureInfo.InvariantCulture);
                            }

                            @formattedPortfolioNetWorth

                        }</span>
                    <span id="trimmed">@ViewBag.CurrentSymbol</span>
                    <span id="yesterday_change"></span>
                </p>
            </div>
            <button class="btn portfolio-add-button"><a asp-controller="Transakcija" asp-action="Create"
                    class="portfolio-add-button-link">+ Add transaction</a></button>
        </div>
        <br />
        <br />
        <div id="canvas_a">
            <canvas id="myChart" width="600" height="300"></canvas>
            <canvas id="myChart2" height="300"></canvas>
        </div>

        <table style="display: none;">
            <thead>
                <tr>
                    <th class="pe-5">Date</th>
                    <th class="pe-5">Asset</th>
                    <th class="pe-5">Price</th>
                    <th class="pe-5">Quantity</th>
                </tr>
            </thead>
            <tbody id="parsed_podatki">
                @foreach (var t in @ViewBag.transactions)
                {
                    <tr>
                        <td>@t.Date.ToString("yyyy-MM-ddTHH:mm:ss")</td>
                        <td>@t.Asset.Name</td>
                        <td>@t.Price</td>
                        <td>@t.Quantity</td>
                    </tr>
                }
            </tbody>
        </table>


        <hr>
        <div class="d-flex">
            <p class="portfolio-holdings-switcher me-5 active">Holdings</p>
            <p class="portfolio-transaction-switcher">Transactions</p>
        </div>
        <table class="portfolio-transaction-history-tab w-100 table striped-table table-hover" id="transactions-table">
            <thead>
                <tr>
                    <th class="pe-5 mainpage-table-name">Date</th>
                    <th class="pe-5 mainpage-table-name">Asset</th>
                    <th class="pe-5 mainpage-table-name">Price</th>
                    <th class="pe-5 mainpage-table-name">Quantity</th>
                </tr>
            </thead>
            <tbody id="podatki">
                @foreach (var t in @ViewBag.transactions)
                {
                    <tr>
                        <td class="mainpage-table-name">@t.Date</td>
                        <td class="mainpage-table-name">@t.Asset.Name</td>
                        <td class="mainpage-table-name">
                            @{
                                string priceString = t.Price?.ToString();
                                string formattedPrice = "N/A";

                                // Get the current rate from ViewBag
                                currentRateString = ViewBag.CurrentRate?.ToString();

                                if (!string.IsNullOrWhiteSpace(priceString) && !string.IsNullOrWhiteSpace(currentRateString))
                                {
                                    // Parse strings to decimal
                                    decimal price = decimal.Parse(priceString);
                                    decimal currentRate = decimal.Parse(currentRateString,
                                    System.Globalization.CultureInfo.InvariantCulture);

                                    // Adjust price by the current rate
                                    decimal adjustedPrice = price / currentRate;

                                    // Format to two decimal places
                                    formattedPrice = adjustedPrice.ToString("N2", System.Globalization.CultureInfo.InvariantCulture);
                                }

                                @formattedPrice
                                @ViewBag.CurrentSymbol
                            }
                        </td>
                        <td class="mainpage-table-name">@t.Quantity</td>
                    </tr>
                }
            </tbody>
        </table>
        <table class="portfolio-overview-tab w-100 table striped-table table-hover" id="overview-table">
            <thead>
                <tr>
                    <th class="pe-5 mainpage-table-name">Asset</th>
                    <th class="pe-5 mainpage-table-name">Price</th>
                    <th class="pe-5 mainpage-table-name">Holdings</th>
                    <th class="pe-5 mainpage-table-name">Average buy price</th>
                    <th class="pe-5 mainpage-table-change">Profit/Loss (ROI)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var t in @ViewBag.overview)
                {
                    <tr>
                        <td class="mainpage-table-name">@t.AssetName</td>
                        <td class="mainpage-table-name">
                            @{
                                string currentAssetPriceString = t.CurrentAssetPrice?.ToString();
                                string formattedCurrentAssetPrice = "N/A";

                                // Get the current rate from ViewBag
                                currentRateString = ViewBag.CurrentRate?.ToString();

                                if (!string.IsNullOrWhiteSpace(currentAssetPriceString) &&
                                !string.IsNullOrWhiteSpace(currentRateString))
                                {
                                    // Parse strings to decimal
                                    decimal currentAssetPrice = decimal.Parse(currentAssetPriceString);
                                    decimal currentRate = decimal.Parse(currentRateString,
                                    System.Globalization.CultureInfo.InvariantCulture);

                                    // Adjust price by the current rate
                                    decimal adjustedCurrentAssetPrice = currentAssetPrice / currentRate;

                                    // Format to two decimal places
                                    formattedCurrentAssetPrice = adjustedCurrentAssetPrice.ToString("N2",
                                    System.Globalization.CultureInfo.InvariantCulture);
                                }

                                @formattedCurrentAssetPrice
                                @ViewBag.CurrentSymbol
                            }
                        </td>
                        <td class="mainpage-table-name">@t.TotalQuantity</td>
                        <td class="mainpage-table-name">
                            @{
                                string averagePriceString = t.AveragePrice?.ToString();
                                string formattedAveragePrice = "N/A";
                                // Get the current rate from ViewBag
                                currentRateString = ViewBag.CurrentRate?.ToString();

                                if (!string.IsNullOrWhiteSpace(averagePriceString) && !string.IsNullOrWhiteSpace(currentRateString))
                                {
                                    // Parse strings to decimal
                                    decimal averagePrice = decimal.Parse(averagePriceString);
                                    decimal currentRate = decimal.Parse(currentRateString,
                                    System.Globalization.CultureInfo.InvariantCulture);

                                    // Adjust price by the current rate
                                    decimal adjustedAveragePrice = averagePrice / currentRate;

                                    // Format to two decimal places
                                    formattedAveragePrice = adjustedAveragePrice.ToString("N2",
                                    System.Globalization.CultureInfo.InvariantCulture);
                                }

                                @formattedAveragePrice
                                @ViewBag.CurrentSymbol
                            }
                        </td>
                        <td class="change mainpage-table-change">
                            @{
                                string changePercent24Hr = @t.ProfitLoss.ToString();
                                string replacedString = changePercent24Hr.Replace(",", ".");
                                string formattedchangePercent24Hr = "N/A";

                                if (!string.IsNullOrWhiteSpace(replacedString) && replacedString.Contains("."))
                                {
                                    int dotIndex = replacedString.IndexOf(".");
                                    formattedchangePercent24Hr = replacedString.Substring(0, dotIndex + 5);
                                }

                                @formattedchangePercent24Hr
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    for (let i = 0; i < document.getElementsByClassName('change').length; i++) {
        value = document.getElementsByClassName('change')[i].innerHTML;
        value = parseFloat(value);
        if (value > 0) {
            document.getElementsByClassName('change')[i].classList.toggle("up");
            svg_up = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-up-fill" viewBox="0 0 16 16">
  <path d="m7.247 4.86-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z"/>
</svg>`;
            document.getElementsByClassName('change')[i].innerHTML = svg_up + ' ' + (value * 100) + "%";
        }
        else {
            document.getElementsByClassName('change')[i].classList.toggle("down");
            svg_down = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-down-fill" viewBox="0 0 16 16">
            <path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z" />
        </svg>`;
            document.getElementsByClassName('change')[i].innerHTML = svg_down + ' ' + (value * 100) + "%";
        }
    }


    // Tole je tudi good
    const holdingsSwitcher = document.querySelector('.portfolio-holdings-switcher');
    const transactionsSwitcher = document.querySelector('.portfolio-transaction-switcher');
    const holdingsTable = document.querySelector('.portfolio-overview-tab');
    const transactionsTable = document.querySelector('.portfolio-transaction-history-tab');

    // Function to show holdings table and hide transactions table
    holdingsSwitcher.addEventListener('click', () => {
        holdingsTable.style.display = 'table'; // Show the holdings table
        transactionsTable.style.display = 'none'; // Hide the transactions table

        // Add active style to the clicked button
        holdingsSwitcher.classList.add('active');
        transactionsSwitcher.classList.remove('active');
    });

    // Function to show transactions table and hide holdings table
    transactionsSwitcher.addEventListener('click', () => {
        holdingsTable.style.display = 'none'; // Hide the holdings table
        transactionsTable.style.display = 'table'; // Show the transactions table

        // Add active style to the clicked button
        transactionsSwitcher.classList.add('active');
        holdingsSwitcher.classList.remove('active');
    });

    // Initialize by hiding one of the tables (optional)
    transactionsTable.style.display = 'none'; // Hide transactions table by default



    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE

    //dobis vse dneve od prve transakcije do vcerajsnega datuma
    function getDaysWithMonthNames(startDate) {
        var currentDates = new Date();
        currentDates.setDate(currentDates.getDate() + 1);
        var endDate = new Date(); // Današnji datum
        endDate = currentDates;
        const daysWithMonthNames = [];
        // Nastavite začetni datum na začetni datum (ura nastavljena na 00:00:00)
        startDate.setHours(0, 0, 0, 0);
        // Preverite, ali je začetni datum pred današnjim datumom
        if (startDate > endDate) {
            console.error('Začetni datum ne sme biti kasnejši od današnjega datuma.');
            return [];
        }
        // Zanka za iteracijo skozi dni
        for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {
            const formattedDate = date.toISOString().split('T')[0]; // Format: yyyy-MM-dd
            daysWithMonthNames.push(`${formattedDate}`);
        }
        return daysWithMonthNames;
    }

    var lastDate = '@ViewBag.lastTransaction.Date.ToString("yyyy-MM-ddTHH:mm:ss")';
    var startDate2 = new Date(lastDate);
    const days = getDaysWithMonthNames(startDate2);

    var date = new Date(startDate2);
    var milliseconds_first_transaction = date.getTime();
    var today_date = new Date();
    var milliseconds_today = today_date.getTime();

    @*     var apiURL = "https://api.coincap.io/v2/assets/bitcoin/history?interval=d1&start=" + milliseconds_first_transaction + "&end=" + milliseconds_today;
    let fetchRes = fetch(apiURL);
    fetchRes.then(res =>
        res.json()).then(d => {
            console.log(d);
        }) *@

    // Pridobimo vse vrstice iz <tbody> z ID-jem data-transactions
    const rows = document.querySelectorAll("#parsed_podatki tr");

    const podatki = [];
    rows.forEach(row => {
        const cells = row.querySelectorAll("td");
        const obj = {
            Date: cells[0].textContent.trim(),
            Name: cells[1].textContent.trim(),
            Price: parseFloat(cells[2].textContent.trim()),
            Quantity: parseFloat(cells[3].textContent.trim())
        };
        podatki.push(obj);
    });

    // Prikaz podatkov v konzoli
    console.log("parsed_podatki");
    console.log(podatki);

    var currentRate = @ViewBag.CurrentRate;
    console.log(currentRate);

    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE


    @*     // Funkcija za normalizacijo datumov (nastavi čas na 00:00:00)
    function normalizeDate(date) {
        const normalized = new Date(date);
        normalized.setHours(0, 0, 0, 0);
        return normalized;
    }

    // Funkcija za izračun vrednosti portfelja
    function calculatePortfolioValue(transactions, startDate) {
        // Pridobimo dneve od startDate do danes
        const days = getDaysWithMonthNames(new Date(startDate));

        // Pretvorimo transakcije v bolj uporabno obliko (pretvorimo datume)
        const parsedTransactions = transactions.map(t => ({
            ...t,
            Date: normalizeDate(new Date(t.Date))
        }));
        console.log(parsedTransactions);
        // Objekt za shranjevanje vrednosti portfelja za vsak dan
        const portfolioValues = {};

        // Iteriramo skozi dni
        days.forEach(day => {
            const currentDate = normalizeDate(new Date(day));
            // Filtriramo transakcije, ki so bile izvedene pred ali na currentDate
            const filteredTransactions = parsedTransactions.filter(t => t.Date <= currentDate);

            // Izračunamo skupno vrednost portfelja za ta dan
            const totalValue = filteredTransactions.reduce((sum, t) => {
                return sum + t.Price * t.Quantity; //t.Price se spremeni dinamicno glede na dan
            }, 0);

            // Shranimo vrednost za ta dan
            portfolioValues[day] = totalValue;
        });

        return portfolioValues;
    }

    const portfolio = calculatePortfolioValue(podatki, startDate2);
    const portfolioValues = Object.values(portfolio); *@

        // Helper function to normalize a date to 00:00:00
        function normalizeDate(date) {
            const normalized = new Date(date);
            normalized.setHours(0, 0, 0, 0);
            return normalized;
        }

    // Function to fetch historical prices for a specific asset
    async function fetchHistoricalPrices(assetName, startDate, endDate) {
        const apiURL = `https://api.coincap.io/v2/assets/${assetName.toLowerCase()}/history?interval=d1&start=${startDate.getTime()}&end=${endDate.getTime()}`;
        const response = await fetch(apiURL);
        const data = await response.json();
        return data.data.reduce((acc, entry) => {
            acc[normalizeDate(entry.time).toISOString()] = parseFloat(entry.priceUsd);
            return acc;
        }, {});
    }

    // Function to calculate total portfolio value per day
    async function calculatePortfolioValuePerDay(transactions, days) {
        const assets = [...new Set(transactions.map(t => t.Name))]; // Unique assets
        const startDate = normalizeDate(new Date(days[0]));
        const endDate = normalizeDate(new Date(days[days.length - 1]));
        // Fetch historical prices for each asset
        const historicalPrices = {};
        for (const asset of assets) {
            historicalPrices[asset] = await fetchHistoricalPrices(asset, startDate, endDate);
        }
        // Calculate portfolio value for each day
        const portfolioValues = days.reduce((acc, day) => {
            const normalizedDay = normalizeDate(day).toISOString();
            let dailyTotal = 0;
            //console.log(day);
            //console.log(normalizedDay);
            transactions.forEach(transaction => {
                const transactionDate = normalizeDate(transaction.Date).toISOString();
                if (transactionDate <= normalizedDay) {
                    const assetPrice = historicalPrices[transaction.Name][normalizedDay];
                    if (assetPrice) {
                        dailyTotal += (assetPrice * transaction.Quantity) / currentRate;
                    }
                }
            });

            acc[normalizedDay] = dailyTotal;
            return acc;
        }, {});


        // Calculate asset allocation for the last day
        const lastDay = normalizeDate(days[days.length - 2]).toISOString();
        const lastDayAllocation = {};
        let totalValueOnLastDay = 0;

        transactions.forEach(transaction => {
            const transactionDate = normalizeDate(transaction.Date).toISOString();
            if (transactionDate <= lastDay) {
                const assetPrice = historicalPrices[transaction.Name][lastDay];
                if (assetPrice) {
                    const assetValue = assetPrice * transaction.Quantity;
                    lastDayAllocation[transaction.Name] = (lastDayAllocation[transaction.Name] || 0) + assetValue;
                    totalValueOnLastDay += assetValue;
                }
            }
        });

        // Convert allocation to percentages
        const assetAllocation = Object.keys(lastDayAllocation).reduce((acc, asset) => {
            acc[asset] = lastDayAllocation[asset] / currentRate;
            return acc;
        }, {});

        return {
            portfolioValues: Object.values(portfolioValues), assetAllocation
        };

        //return Object.values(portfolioValues); // Return array of daily values
    }


    // Example usage
    (async () => {
        const portfolioValues = await calculatePortfolioValuePerDay(podatki, days);
        yourFunction(portfolioValues);
        let vl = document.getElementById('yesterday_change').innerHTML;
        let vl2 = document.getElementById('portfolio_networth_id').innerHTML;

        let vcerajsnja_vrednost = portfolioValues.portfolioValues[portfolioValues.portfolioValues.length - 2];
        console.log(vl2);
        console.log(vcerajsnja_vrednost);
        // Convert vl2 to a number
        var vl2Number = parseFloat(vl2.replace(/,/g, ''));
        console.log(vl2Number);
        // Calculate the percentage difference
        var procent = ((vl2Number - vcerajsnja_vrednost) / vcerajsnja_vrednost) * 100;
        procent = procent.toFixed(2);
        // Calculate the subtraction
        var vrednost = vl2Number - vcerajsnja_vrednost;
        vrednost = vrednost.toFixed(2);
        // Output the results
        if (vrednost < 0) {
            document.getElementById('yesterday_change').innerHTML = ", " + `<span class="down">` + vrednost + "$ (" + procent + "%)" + `</span>` + " in 24h";
        }
        else {
            document.getElementById('yesterday_change').innerHTML = ",&nbsp" + `<span class="up">` + "+" + vrednost + "$ (" + procent + "%)" + `</span>` + "&nbspin 24h";
        }
    })();


    function yourFunction(stuff) {
        let foo = days.slice(0, -1);
        let foo2 = stuff.portfolioValues.slice(0, -1);
        const assetNames = Object.keys(stuff.assetAllocation);
        const assetPercentages = Object.values(stuff.assetAllocation);
        const data = {
            labels: foo, // X AXIS
            datasets: [{
                label: 'Portfolio value',
                data: foo2, // Y AXIS
                borderColor: 'rgb(0, 171, 102)',
                backgroundColor: 'rgba(0, 171, 102, 0.4)',
                fill: true,
                tension: 0.1
            }]
        };

        // Konfiguracija grafa
        const config = {
            type: 'line',
            data: data,
            options: {
                responsive: false,
                maintainAspectRatio: false, // Allow resizing
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    x: {
                        grid: {
                            display: false // Disable gridlines for the x-axis
                        },
                        title: {
                            display: true,
                            text: 'Day'
                        },
                        ticks: {
                            callback: function (value, index, values) {
                                // Show only every second label
                                return index % 2 === 0 ? this.getLabelForValue(value) : '';
                            },
                            color: '#f5acc6'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Portfolio value (' + '@ViewBag.CurrentSymbol' + ')',
                            color: '#f5acc6',
                        },
                        ticks: {
                            color: '#f5acc6'
                        },
                        grid: {
                            color: '#7d7577'
                        }
                    }
                }
            },
        };

        // Inicializirajte graf
        const ctx = document.getElementById('myChart').getContext('2d');
        const ctx2 = document.getElementById('myChart2').getContext('2d');
        new Chart(ctx, config);
        new Chart(ctx2, {
            type: 'pie',
            data: {
                labels: assetNames,
                datasets: [{
                    data: assetPercentages,
                    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'], // Customize colors
                }]
            },
            options: {
                responsive: false,
                maintainAspectRatio: false, // Allow resizing
                plugins: {
                    legend: {
                        display: true,
                        position: 'right',
                        labels: {
                            padding: 5 // Reduce space between legend items
                        },
                    },
                    title: {
                        display: true,   // Set to true to display the title
                        text: 'Asset Allocation', // Title 
                        font: {
                            size: 18,  // Font size of the title
                            weight: 'bold',  // Font weight of the title
                            family: "monospace",
                        },
                        color: '#df4f90',
                    },
                },
            }
        });
    }

    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS
    //CONFIG STUFF ZA CHARTJS




    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE        
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    //SAM DA SE SE KJE JE GOOD KJE PA NE
    document.addEventListener("DOMContentLoaded", function () {
        const savedThemeInput = document.getElementById("saved-theme");

        // Apply the initial theme based on the value of the hidden input
        const applyTheme = (theme) => {
            const navbarTheme = document.getElementById("navbar");
            const navbar_titleTheme = document.getElementById("navbar_title");
            const partial_footerTheme = document.getElementById("partial_footer");
            const nav_linkTheme = document.getElementsByClassName("nav-link2");
            const navbar_gearTheme = document.getElementById("navbar_gear");
            const table = document.getElementById("transactions-table");
            const table2 = document.getElementById("overview-table");
            if (theme == "dark") {
                navbar_gearTheme.setAttribute("fill", "#f5acc6");
                table.classList.add("dark-theme");
                table.classList.remove("light-theme");
                table2.classList.add("dark-theme");
                table2.classList.remove("light-theme");
            }
            else {
                navbar_gearTheme.setAttribute("fill", "#392d31");
                table.classList.add("light-theme");
                table.classList.remove("dark-theme");
                table2.classList.add("light-theme");
                table2.classList.remove("dark-theme");
            }
            document.body.className = theme === "dark" ? "dark-mode" : "light-mode";
            navbarTheme.className = theme === "dark" ? "dark-mode" : "light-mode";
            partial_footerTheme.classList.toggle(theme === "dark" ? "dark-mode" : "light-mode");
            navbar_titleTheme.classList.toggle(theme === "dark" ? "dark-mode" : "light-mode");
            for (let i = 0; i < nav_linkTheme.length; i++) {
                nav_linkTheme[i].classList.toggle(theme === "dark" ? "dark-mode" : "light-mode");
            }
        };

        // Initialize theme on page load
        applyTheme(savedThemeInput.value);

        // Observe changes to the input value
        const observer = new MutationObserver(() => {
            applyTheme(savedThemeInput.value);
        });

        // Start observing the hidden input for changes to the `value` attribute
        observer.observe(savedThemeInput, { attributes: true, attributeFilter: ["value"] });
    });

    var spanElement = document.getElementById('trimmed');
    if (spanElement) {
        spanElement.textContent = spanElement.textContent.trim();
    }
</script>
